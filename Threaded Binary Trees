Project: Threaded Binary Trees

Instructor: Dr. Anil Shukla

Mentor: Kirandeep Kaur Maam

Members: 
Shyam Prajapati (2020csb1110)
Arya Phalke (2020csb1107)
Jemee Butani (2020csb1091)

Summary:
In this project we have implemented and analysed doubly threaded binary trees. 
Why threaded binary tree? In normal binary trees we had to use stack and recursion for in order traversal but with help of threaded binary trees, we can do it faster. 
We are basically using the NULL pointers which are available to point to inorder successor & predecessor. 
Also, ancestor of any node can be accessed very fast using this type of trees.
Doubly Threaded Binary Search Tree is one of the most used types of Advanced Data Structures used in places where faster traversal is required.
Also used in systems where hardware space is limited.

Advantages of Threaded Binary Tree:
-> In threaded binary tree, linear and fast traversal of nodes in the tree so there is no requirement of stack. If the stack is used then it consumes a lot of memory and time.
-> It is more general as one can efficiently determine the successor and predecessor of any node by simply following the thread and links. It almost behaves like a circular linked list.
-> Used in Morris traversal to modify the binary search tree and to detect the swapped elements in th binary search tree.

How To Run?
Enter I to insert elements.
Enter D to delete any specified node.
Enter S to search any number in the tree.
Enter Q to quit.
Enter T to print inorder traversal.
The uses and functionallity of all functions are mentioned side by side as comments in the main code.

Debugged successfully.

Thankyou !
